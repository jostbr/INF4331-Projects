
Username: jostbr
Course: INF4331

------------- GENEREAL COMMENTS -------------
Various edge cases (e.g. keyword arguments in function definitions and strings in
func def's and if/elif-statements are interpretaded to be colored like part of the
definition and not its own variable assignment or string color. This is also the
case for True, False and None in func def's and if/elif) are taken care of through
the regex'es in the .syntax-files rather than the script highlighter.py allowing
highlighter.py to be as general as possible.

---- EXERCISE 5.1 (highlighter.py) ----
See highlighter.py for source code and comments on implementation


---- EXERCISE 5.2 (python.syntax, python.theme, python2.theme, ex_python_source.py) ----
Pieces of choosen syntax together with my understanding on how to highlight them.
- Comments                : Everything behind "#" on the same line
- Function definitions    : Everything after "def" (including args) up to colon 
- Class definitions       : Everything after "class" including supers up to colon
- Single line strings     : Everything between "..." or '...' or
- Multiline strings       : Everything between """...""" or '''...''' (could be multiline)
- Imports                 : The entire import (absolute, relative and aliases supported)
- Special statements      : None, True, False, pass, continue, break, return
- Variable assignments    : Variable and equal sign (not highlighted in "def"-line)
- Try/Except              : Everything in the try/except-statement up to colon
- For-loops               : Everything in the for-statement uo to colon
- While-loop              : Everything in the while-statement up to colon
- If/elif/else            : Everything in the if/elif/else-statement up to colon

For an example on what the syntax highlighting looks like, run
> python highlighter.py python.syntax python.theme ex_python_source.py
> python highlighter.py python.syntax python2.theme ex_python_source.py

---- EXERCISE 5.3 (c.syntax, c.theme, ex_c_source.c) ----
Pieces of choosen syntax together with my understanding on how to highlight them.
- Single comments         : Everything behind "//" on the same line
- Multiline comments      : Everything between "/*" and "*/" (could be multiline)
- Function definitions    : Everything in the function declaration except "{"
- Strings                 : Everythig between "..." or '...'
- Include                 : Include's are colored in two parts ("# include" and ("<...>")
- Special statements      : NULL, true, false, continue, break return
- Variabel declarations   : Data type and variable name (not ";")
- Variable assignments    : Data type, variabel name and equal sign (not in func, for...)
- For-loops               : Everything in the for-statement up to not including ";"
- While-loop              : Everything in the while-statement up to not including ";"
- If/else if/else         : Everything in the if/else if/else-statement not including ";"

For an example on what the syntax highlighting looks like, run
> python highlighter.py c.syntax c.theme ex_c_source.c

---- EXERCISE 5.4 (fortra.syntax, fortran.theme, ex_fortran_source.f90) ----
Pieces of choosen syntax together with my understanding on how to highlight them.
- Prorgram                : Program delcaration and termination statements
- Implicit none           : Implicit none statement (including none)
- Comments                : Everything behind "!" on the same line
- Strings                 : Everythig between "..." or '...'
- Special statements      : CALL, NULL, .TRUE., .FALSE., cycle, exit
- Variabel types          : Data type and possibly a "parameter"-specifyer
- Variable assignments    : Variabel name and equal sign (not in do-statements)
- Do-loops                : Everything in the do-statement and the "end do"
- Do while-loop           : Everything in the while-statement and the "end do"
- If/else if/else         : Everything in the if/else if/else-statement and the "end if"

For an example on what the syntax highlighting looks like, run
> python highlighter.py fortran.syntax fortran.theme ex_fortran_source.c

---- Exercise 5.5 (my_diff.py, original_file.txt. modified_file.txt, diff_output.txt) ----
Here I have chosen to print that a line has been deleted/replaced from the original file
before the adding of the new/replacement line happens in the modified file. As an example;

OG FILE    MOD FILE    DIFF
   A          C        - A
   B          B        + C
                       0 B

This was the most logical way for me, but one could certainly print it with the "+" before
the "-" instead.

For an example on what the computed difference looks like, run
> python my_diff.py original_file.txt modified_file.txt

---- EXERCISE 5.6 (diff.syntax, diff.theme, diff_ouput.txt) ----
Here the diff_output.txt file is generated by my_diff.py in exercise 5.5 and using
diff.syntax and diff.theme, highlighter.py colors diff_output.txt.

For an example on what the difference looks like, run one of the two (both same print)
> python my_diff.py original_file.txt modified_file.txt
> python highlighter.py diff.syntax diff.theme diff_output.txt